package com.example.webscanner.service;

import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;

@Service
public class VulnerabilityScannerService {

    public Map<String, String> scanForVulnerabilities(String url) {
        Map<String, String> vulnerabilities = new HashMap<>();

        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            // XSS Check
            vulnerabilities.put("XSS", isXSSVulnerable(httpClient, url) ? "High" : "None");

            // SQL Injection Check
            vulnerabilities.put("SQL Injection", isSQLInjectionVulnerable(httpClient, url) ? "High" : "None");
        } catch (IOException e) {
            e.printStackTrace();
            vulnerabilities.put("Error", "Unable to complete scan due to an error.");
        }

        return vulnerabilities;
    }

    private boolean isXSSVulnerable(CloseableHttpClient httpClient, String url) {
        String[] xssPayloads = {
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "<svg/onload=alert('XSS')>",
            "';alert('XSS');//",
            "<iframe src=javascript:alert('XSS')>",
            "<input onfocus=alert('XSS') autofocus>",
            "%3Cscript%3Ealert('XSS')%3C/script%3E",
            "%3Cimg%20src%3dx%20onerror%3dalert('XSS')%3E"
        };

        for (String payload : xssPayloads) {
            try {
                String encodedPayload = URLEncoder.encode(payload, StandardCharsets.UTF_8.toString());
                HttpGet request = new HttpGet(url + "?input=" + encodedPayload);
                try (CloseableHttpResponse response = httpClient.execute(request)) {
                    HttpEntity entity = response.getEntity();
                    String responseBody = EntityUtils.toString(entity, StandardCharsets.UTF_8);

                    // Log the response body for debugging
                    System.out.println("Response for payload: " + payload);
                    System.out.println("Response body: " + responseBody);

                    // Check for signs of XSS execution or reflected payload
                    if (isXSSExecuted(responseBody) || responseBody.contains(encodedPayload)) {
                        System.out.println("XSS vulnerability detected with payload: " + payload);
                        return true; // Vulnerable to XSS
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return false; // Not vulnerable to XSS
    }

    private boolean isXSSExecuted(String responseBody) {
        // Check for signs of XSS execution, such as alert dialogs or script tags
        return responseBody.contains("alert('XSS')") || 
               responseBody.contains("<script>") || 
               responseBody.contains("<img") || 
               responseBody.contains("onerror") || 
               responseBody.contains("onload") || 
               responseBody.contains("javascript:");
    }

    private boolean isSQLInjectionVulnerable(CloseableHttpClient httpClient, String url) {
        String[] sqlPayloads = {
            "' OR '1'='1'; --",
            "' OR '1'='1' /*",
            "' UNION SELECT username, password FROM users --",
            "'; DROP TABLE users; --",
            "'; --",
            "' AND 1=1; --",
            "' OR '1'='1' AND email IS NULL; --"
        };

        for (String payload : sqlPayloads) {
            try {
                String encodedPayload = URLEncoder.encode(payload, StandardCharsets.UTF_8.toString());
                HttpGet request = new HttpGet(url + "?input=" + encodedPayload);
                try (CloseableHttpResponse response = httpClient.execute(request)) {
                    HttpEntity entity = response.getEntity();
                    String responseBody = EntityUtils.toString(entity, StandardCharsets.UTF_8);

                    // Log the response body for debugging
                    System.out.println("Response for payload: " + payload);
                    System.out.println("Response body: " + responseBody);

                    // Example check: look for SQL error patterns in the response
                    if (isSQLInjectionError(responseBody) || isSQLExecuted(responseBody)) {
                        return true; // Vulnerable to SQL Injection
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return false; // Not vulnerable to SQL Injection
    }

    private boolean isSQLInjectionError(String responseBody) {
        // Look for common SQL error messages or syntax error indications
        return responseBody.toLowerCase().contains("syntax") ||
               responseBody.toLowerCase().contains("error") ||
               responseBody.toLowerCase().contains("database") ||
               responseBody.toLowerCase().contains("warning");
    }

    private boolean isSQLExecuted(String responseBody) {
        // Analyze response for signs of SQL execution or unexpected behavior
        return responseBody.toLowerCase().contains("sql");
    }
}
