package com.example.webscanner.service;

import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Image;
import com.itextpdf.layout.element.Paragraph;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;
import org.springframework.stereotype.Service;

import java.awt.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;

@Service
public class ReportGeneratorService {

    public String generateReport(Map<String, String> vulnerabilities, String url) {
        String filePath = null;
        ByteArrayOutputStream chartStream = new ByteArrayOutputStream();

        try {
            // Create pie chart dataset
            DefaultPieDataset<String> dataset = new DefaultPieDataset<>();
            for (Map.Entry<String, String> entry : vulnerabilities.entrySet()) {
                dataset.setValue(entry.getKey(), entry.getValue().equals("High") ? 1 : 0);
            }

            // Create pie chart
            JFreeChart chart = ChartFactory.createPieChart("Vulnerability Report", dataset, true, true, false);
            PiePlot<String> plot = (PiePlot<String>) chart.getPlot();
            plot.setSectionPaint("XSS", Color.RED);
            plot.setSectionPaint("SQL Injection", Color.ORANGE);

            // Create a temporary file for the chart image
            File tempChartFile = new File(System.getProperty("java.io.tmpdir"), "chart.png");
            org.jfree.chart.ChartUtils.saveChartAsPNG(tempChartFile, chart, 800, 600);
            chartStream.write(Files.readAllBytes(tempChartFile.toPath()));
            tempChartFile.delete(); // Clean up temporary file

            // Prepare the PDF file path in the Downloads folder
            String userHome = System.getProperty("user.home");
            String downloadsFolder = userHome + "/Downloads";
            filePath = downloadsFolder + "/Vulnerability_Report_" +
                    new SimpleDateFormat("yyyyMMddHHmm").format(new Date()) + ".pdf";

            // Create PDF document
            PdfWriter writer = new PdfWriter(filePath);
            PdfDocument pdfDocument = new PdfDocument(writer);
            Document document = new Document(pdfDocument);

            // Add title and details to PDF
            document.add(new Paragraph("Vulnerability Scan Report").setBold().setFontSize(20));
            document.add(new Paragraph("Date of Scan: " + new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date())));
            document.add(new Paragraph("Input URL: " + url));
            document.add(new Paragraph("Threat Levels: " + vulnerabilities.toString()));
            document.add(new Paragraph("\nMitigation Techniques:").setBold());

            // Add mitigation strategies based on identified vulnerabilities
            if ("High".equals(vulnerabilities.get("XSS"))) {
                document.add(new Paragraph("1. Validate and sanitize user input."));
                document.add(new Paragraph("2. Use Content Security Policy (CSP) headers."));
                document.add(new Paragraph("3. Encode output to prevent script execution."));
            }

            if ("High".equals(vulnerabilities.get("SQL Injection"))) {
                document.add(new Paragraph("1. Use prepared statements with parameterized queries."));
                document.add(new Paragraph("2. Validate and sanitize all user inputs."));
                document.add(new Paragraph("3. Use ORM frameworks for input sanitization."));
            }

            // Add the chart image to the PDF
            Image chartImage = new Image(com.itextpdf.io.image.ImageDataFactory.create(chartStream.toByteArray()));
            document.add(chartImage);

            // Close the document
            document.close();
            System.out.println("Report generated: " + filePath);
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println("Error generating report.");
        }

        return filePath;
    }
}
